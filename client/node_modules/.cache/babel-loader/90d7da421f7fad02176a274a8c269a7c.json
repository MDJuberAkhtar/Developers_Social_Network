{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Akhtar\\\\Documents\\\\Study Material\\\\Social_Network\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case GET_POSTS:\n      return _objectSpread({}, state, {\n        posts: payload,\n        loading: false\n      });\n\n    case GET_POSTS:\n      return _objectSpread({}, state, {\n        posts: payload,\n        loading: false\n      });\n\n    case POST_ERROR:\n      return _objectSpread({}, state, {\n        error: payload,\n        loading: false\n      });\n\n    case UPDATE_LIKES:\n      return _objectSpread({}, state, {\n        posts: state.posts.map(post => post._id === payload.id ? _objectSpread({}, post, {\n          likes: payload.likes\n        }) : post),\n        loading: false\n      });\n\n    case DELETE_POST:\n      return _objectSpread({}, state, {\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      });\n\n    case ADD_POST:\n      return _objectSpread({}, state, {\n        posts: [payload, ...state.posts],\n        loading: false\n      });\n\n    case ADD_COMMENT:\n      return _objectSpread({}, state, {\n        post: _objectSpread({}, state.post, {\n          comments: payload\n        }),\n        loading: false\n      });\n\n    case REMOVE_COMMENT:\n      return _objectSpread({}, state, {\n        post: _objectSpread({}, state.post, {\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        }),\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/Akhtar/Documents/Study Material/Social_Network/client/src/reducers/post.js"],"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","state","action","type","payload","map","_id","id","likes","filter","comments","comment"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,EAA8CC,WAA9C,EAA2DC,QAA3D,EAAqEC,QAArE,EAA+EC,WAA/E,EAA4FC,cAA5F,QAAkH,kBAAlH;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,eAAe,UAASC,KAAK,GAAGL,YAAjB,EAA+BM,MAA/B,EAAsC;AAAA,QAC3CC,IAD2C,GACzBD,MADyB,CAC3CC,IAD2C;AAAA,QACrCC,OADqC,GACzBF,MADyB,CACrCE,OADqC;;AAEnD,UAAOD,IAAP;AACE,SAAKf,SAAL;AACC,+BAAYa,KAAZ;AAAmBJ,QAAAA,KAAK,EAAEO,OAA1B;AAAmCL,QAAAA,OAAO,EAAE;AAA5C;;AACD,SAAKX,SAAL;AACC,+BAAYa,KAAZ;AAAmBJ,QAAAA,KAAK,EAAEO,OAA1B;AAAmCL,QAAAA,OAAO,EAAE;AAA5C;;AACD,SAAKV,UAAL;AACC,+BAAYY,KAAZ;AAAmBD,QAAAA,KAAK,EAAEI,OAA1B;AAAmCL,QAAAA,OAAO,EAAE;AAA5C;;AACD,SAAKT,YAAL;AACC,+BAAYW,KAAZ;AAAmBJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,GAAZ,CAAgBP,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAO,CAACG,EAArB,qBAA+BT,IAA/B;AAAqCU,UAAAA,KAAK,EAAEJ,OAAO,CAACI;AAApD,aAA8DV,IAAtF,CAA1B;AAAwHC,QAAAA,OAAO,EAAE;AAAjI;;AACD,SAAKR,WAAL;AACC,+BAAYU,KAAZ;AAAmBJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYY,MAAZ,CAAmBX,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAxC,CAA1B;AAA6EL,QAAAA,OAAO,EAAE;AAAtF;;AACD,SAAKP,QAAL;AACC,+BAAYS,KAAZ;AAAmBJ,QAAAA,KAAK,EAAE,CAAEO,OAAF,EAAW,GAAGH,KAAK,CAACJ,KAApB,CAA1B;AAAsDE,QAAAA,OAAO,EAAE;AAA/D;;AACD,SAAKL,WAAL;AACC,+BAAYO,KAAZ;AAAmBH,QAAAA,IAAI,oBAAMG,KAAK,CAACH,IAAZ;AAAkBY,UAAAA,QAAQ,EAAEN;AAA5B,UAAvB;AAA8DL,QAAAA,OAAO,EAAE;AAAvE;;AACD,SAAKJ,cAAL;AACC,+BAAYM,KAAZ;AAAmBH,QAAAA,IAAI,oBAAMG,KAAK,CAACH,IAAZ;AAAkBY,UAAAA,QAAQ,EAAET,KAAK,CAACH,IAAN,CAAWY,QAAX,CAAoBD,MAApB,CAA2BE,OAAO,IAAIA,OAAO,CAACL,GAAR,KAAgBF,OAAtD;AAA5B,UAAvB;AAAsHL,QAAAA,OAAO,EAAE;AAA/H;;AACD;AACC,aAAOE,KAAP;AAlBH;AAoBD","sourcesContent":["import { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/types';\r\n\r\n\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  post: null,\r\n  loading: true,\r\n  error: {}\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n  const { type, payload } = action;\r\n  switch(type){\r\n    case GET_POSTS:\r\n     return { ...state, posts: payload, loading: false };\r\n    case GET_POSTS:\r\n     return { ...state, posts: payload, loading: false };\r\n    case POST_ERROR:\r\n     return { ...state, error: payload, loading: false };\r\n    case UPDATE_LIKES:\r\n     return { ...state, posts: state.posts.map(post => post._id === payload.id ? { ...post, likes: payload.likes } : post ), loading: false };\r\n    case DELETE_POST:\r\n     return { ...state, posts: state.posts.filter(post => post._id !== payload ), loading: false };\r\n    case ADD_POST:\r\n     return { ...state, posts: [ payload, ...state.posts], loading: false };\r\n    case ADD_COMMENT:\r\n     return { ...state, post:{ ...state.post, comments: payload }, loading: false };\r\n    case REMOVE_COMMENT:\r\n     return { ...state, post:{ ...state.post, comments: state.post.comments.filter(comment => comment._id !== payload ) }, loading: false };\r\n    default:\r\n     return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}