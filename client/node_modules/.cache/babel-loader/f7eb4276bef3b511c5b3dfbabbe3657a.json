{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from './types'; //get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('./api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //get likes\n\nexport const addLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //remove likes\n\nexport const removeLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //delete post\n\nexport const deletePost = id => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/${id}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n    dispatch(setAlert('POST REMOVED', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Add posts\n\nexport const addPost = formData => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post(`/api/posts`, formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('POST CREATED', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //get one post\n\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(`./api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //ADD comments\n\nexport const addComment = (postId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //delete comments\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Akhtar/Documents/Study Material/Social_Network/client/src/actions/post.js"],"names":["axios","setAlert","GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","getPosts","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addLike","postId","put","likes","removeLike","deletePost","id","delete","addPost","formData","config","headers","post","getPost","addComment","deleteComment","commentId"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from './types';\r\n\r\n//get posts\r\nexport const getPosts = () => async dispatch => {\r\n  try{\r\n    const res = await axios.get('./api/posts');\r\n    dispatch({\r\n      type: GET_POSTS,\r\n      payload: res.data\r\n    });\r\n  }catch(err){\r\n      dispatch({\r\n        type: POST_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n  }\r\n};\r\n\r\n//get likes\r\nexport const addLike = postId => async dispatch => {\r\n  try{\r\n    const res = await axios.put(`/api/posts/like/${postId}`);\r\n    dispatch({\r\n      type: UPDATE_LIKES,\r\n      payload: { postId, likes: res.data }\r\n    });\r\n  }catch(err){\r\n      dispatch({\r\n        type: POST_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n  }\r\n};\r\n//remove likes\r\nexport const removeLike = postId => async dispatch => {\r\n  try{\r\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\r\n    dispatch({\r\n      type: UPDATE_LIKES,\r\n      payload: { postId, likes: res.data }\r\n    });\r\n  }catch(err){\r\n      dispatch({\r\n        type: POST_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n  }\r\n};\r\n//delete post\r\nexport const deletePost = id => async dispatch => {\r\n  try{\r\n    await axios.delete(`/api/posts/${id}`);\r\n    dispatch({\r\n      type: DELETE_POST,\r\n      payload: id\r\n    });\r\n    dispatch(setAlert('POST REMOVED', 'success'));\r\n  }catch(err){\r\n      dispatch({\r\n        type: POST_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n  }\r\n};\r\n//Add posts\r\nexport const addPost = formData => async dispatch => {\r\n  const config ={\r\n    headers:{\r\n      'Content-Type': 'application/json'\r\n    }\r\n  }\r\n  try{\r\n    const res = await axios.post(`/api/posts`, formData, config );\r\n    dispatch({\r\n      type: ADD_POST,\r\n      payload: res.data\r\n    });\r\n    dispatch(setAlert('POST CREATED', 'success'));\r\n  }catch(err){\r\n      dispatch({\r\n        type: POST_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n  }\r\n};\r\n//get one post\r\nexport const getPost = id => async dispatch => {\r\n  try{\r\n    const res = await axios.get(`./api/posts/${id}`);\r\n    dispatch({\r\n      type: GET_POST,\r\n      payload: res.data\r\n    });\r\n  }catch(err){\r\n      dispatch({\r\n        type: POST_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n  }\r\n};\r\n//ADD comments\r\nexport const addComment = (postId, formData ) => async dispatch => {\r\n  const config ={\r\n    headers:{\r\n      'Content-Type': 'application/json'\r\n    }\r\n  }\r\n  try{\r\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData, config );\r\n    dispatch({\r\n      type: ADD_COMMENT,\r\n      payload: res.data\r\n    });\r\n    dispatch(setAlert('Comment Added', 'success'));\r\n  }catch(err){\r\n      dispatch({\r\n        type: POST_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n  }\r\n};\r\n//delete comments\r\nexport const deleteComment = (postId, commentId) => async dispatch => {\r\n\r\n  try{\r\n    const res = await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\r\n    dispatch({\r\n      type: REMOVE_COMMENT,\r\n      payload: commentId\r\n    });\r\n    dispatch(setAlert('Comment Removed', 'success'));\r\n  }catch(err){\r\n      dispatch({\r\n        type: POST_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}